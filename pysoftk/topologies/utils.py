import rdkit
from rdkit import Chem
from rdkit.Chem import AllChem

from rdkit import RDLogger
RDLogger.DisableLog('rdApp.*')

def seek_plhold(mol, atom):
    """ Function Seeking for a specific placeholder atom
    """
    new_bond=[]
    
    for atoms in mol.GetAtoms():
        if atoms.GetSymbol() == str(atom):
            new_bond.append([[ atoms.GetIdx(), nbr.GetIdx()]
                             for nbr in atoms.GetNeighbors()])

    return new_bond

def pattern_recon(pattern):
    """
    Function to find unique values from a string pattern
    
    Parameters:
    ------------  
    pattern :: str
        Variable containing the pattern written in a string.

    Returns:
    ---------
    result :: list    
        Returns the unique values of the pattern in alphabetic 
        order.

    """
    return sorted(list(set(pattern)), key=lambda c:c.upper())

def pattern_repl(pattern, tup_repl):
   """
   Function to perform a pattern replacement using tuples
   generated by pattern and molecular names.

   Parameters:
   ------------  
   pattern :: str
        Variable containing the pattern written in a string

    Returns:
    ---------
    return :: list    
        Returns the names of the molecules as provided by the 
        string pattern.
   """
   
   for r in tup_repl:
      pattern=pattern.replace(*r)

   valid_seq=pattern.split("+")
   return list(filter(None, valid_seq))


def pattern_mol_seq(mols, pattern):
    """
    Function to create a list of molecules 
    based on a user provided pattern.

    Parameters:
    ------------  
    pattern:: str
         A string value containing the desired pattern.

    mols :: list
        List containing the names of the molecules to form 
        a polymer with a given pattern.

    Returns:
    ---------
    return :: list
      List with the correct sequence of molecular fragments 
      to be merged. 
  
    """
    unq_val=pattern_recon(pattern)
    tup_repl=tuple(zip(unq_val,mols))
    return pattern_repl(pattern, tup_repl)
